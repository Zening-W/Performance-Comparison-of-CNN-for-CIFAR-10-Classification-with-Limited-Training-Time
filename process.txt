Trial1:
  Net(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fc1): Linear(in_features=2048, out_features=512, bias=True)
    (fc2): Linear(in_features=512, out_features=10, bias=True)
  )
  hyperparameters:
    learning_rate: 0.01
    batch_size: 128
    num_epochs: 10
    momentum: 0.9
    optimizer: 'SGD'

Total training time: 116.66 seconds
Accuracy of the network on the 10000 test images: 74.98 %
Accuracy of plane : 75 %
Accuracy of   car : 75 %
Accuracy of  bird : 75 %
Accuracy of   cat : 64 %
Accuracy of  deer : 66 %
Accuracy of   dog : 63 %
Accuracy of  frog : 66 %
Accuracy of horse : 84 %
Accuracy of  ship : 87 %
Accuracy of truck : 76 %


Trial2:
  (from hw4)
  Net(
  (conv1): Conv2d(3, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (relu): ReLU()
  (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv2): Conv2d(10, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (flatten): Flatten(start_dim=1, end_dim=-1)
  (fc1): Linear(in_features=1280, out_features=1280, bias=True)
  (fc2): Linear(in_features=1280, out_features=100, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
  )
  hyperparameters:
    learning_rate: 0.01
    batch_size: 128
    num_epochs: 10
    momentum: 0.9
    optimizer: 'SGD'

  Total training time: 114.62 seconds
  Accuracy of the network on the 10000 test images: 61.47 %
  Accuracy of plane : 44 %
  Accuracy of   car : 67 %
  Accuracy of  bird : 48 %
  Accuracy of   cat : 47 %
  Accuracy of  deer : 55 %
  Accuracy of   dog : 51 %
  Accuracy of  frog : 86 %
  Accuracy of horse : 76 %
  Accuracy of  ship : 81 %
  Accuracy of truck : 69 %

Trial3:
Net(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (relu1): ReLU()
  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (relu2): ReLU()
  (pool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (relu3): ReLU()
  (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (flatten): Flatten(start_dim=1, end_dim=-1)
  (fc1): Linear(in_features=8192, out_features=1024, bias=True)
  (relu4): ReLU()
  (fc2): Linear(in_features=1024, out_features=512, bias=True)
  (relu5): ReLU()
  (fc3): Linear(in_features=512, out_features=256, bias=True)
  (relu6): ReLU()
  (fc4): Linear(in_features=256, out_features=10, bias=True)
)
 hyperparameters:
    learning_rate: 0.01
    batch_size: 128
    num_epochs: 10
    momentum: 0.9
    optimizer: 'SGD'

Total training time: 130.33 seconds
Accuracy of the network on the 10000 test images: 72.27 %
Accuracy of plane : 58 %
Accuracy of   car : 78 %
Accuracy of  bird : 78 %
Accuracy of   cat : 70 %
Accuracy of  deer : 51 %
Accuracy of   dog : 45 %
Accuracy of  frog : 61 %
Accuracy of horse : 80 %
Accuracy of  ship : 87 %
Accuracy of truck : 82 %

https://github.com/soapisnotfat/pytorch-cifar10/blob/master/models/AlexNet.py
Trial4:(AlexNet)
Net(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=1024, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=4096, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=4096, out_features=10, bias=True)
  )
  hyperparameters:
    learning_rate: 0.01
    batch_size: 128
    num_epochs: 10
    optimizer: 'Adam'
)
Total training time: 133.63 seconds
Accuracy of the network on the 10000 test images: 70.75 %
Accuracy of plane : 68 %
Accuracy of   car : 67 %
Accuracy of  bird : 66 %
Accuracy of   cat : 41 %
Accuracy of  deer : 66 %
Accuracy of   dog : 48 %
Accuracy of  frog : 75 %
Accuracy of horse : 60 %
Accuracy of  ship : 87 %
Accuracy of truck : 89 %

https://github.com/soapisnotfat/pytorch-cifar10/blob/master/models/LeNet.py
Trail5:(Lenet)
Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=400, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
)
hyperparameters:
    learning_rate: 0.01
    batch_size: 128
    num_epochs: 10
    optimizer: 'Adam'
Total training time: 114.23 seconds
Accuracy of the network on the 10000 test images: 60.94 %
Accuracy of plane : 58 %
Accuracy of   car : 82 %
Accuracy of  bird : 60 %
Accuracy of   cat : 50 %
Accuracy of  deer : 51 %
Accuracy of   dog : 27 %
Accuracy of  frog : 66 %
Accuracy of horse : 44 %
Accuracy of  ship : 62 %
Accuracy of truck : 56 %

Trial6:
  Net(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fc1): Linear(in_features=2048, out_features=512, bias=True)
    (fc2): Linear(in_features=512, out_features=10, bias=True)
  )
  hyperparameters:
    learning_rate: 0.01
    batch_size: 128
    num_epochs: 10
    optimizer: 'Adam'

Total training time: 117.34 seconds
Accuracy of the network on the 10000 test images: 56.05 %
Accuracy of plane : 55 %
Accuracy of   car : 71 %
Accuracy of  bird : 42 %
Accuracy of   cat : 23 %
Accuracy of  deer : 59 %
Accuracy of   dog : 21 %
Accuracy of  frog : 75 %
Accuracy of horse : 48 %
Accuracy of  ship : 62 %
Accuracy of truck : 56 %


Trial7:
  Net(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fc1): Linear(in_features=2048, out_features=512, bias=True)
    (fc2): Linear(in_features=512, out_features=10, bias=True)
  )
  hyperparameters:
    learning_rate: 0.001
    batch_size: 128
    num_epochs: 10
    optimizer: 'SGD'

Total training time: 123.64 seconds
Accuracy of the network on the 10000 test images: 53.26 %
Accuracy of plane : 41 %
Accuracy of   car : 75 %
Accuracy of  bird : 30 %
Accuracy of   cat : 32 %
Accuracy of  deer : 18 %
Accuracy of   dog : 36 %
Accuracy of  frog : 58 %
Accuracy of horse : 52 %
Accuracy of  ship : 75 %
Accuracy of truck : 53 %

Trial8:
  Net(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fc1): Linear(in_features=2048, out_features=512, bias=True)
    (fc2): Linear(in_features=512, out_features=10, bias=True)
  )
  hyperparameters:
    learning_rate: 0.001
    batch_size: 64
    num_epochs: 10
    optimizer: 'SGD'

Total training time: 117.99 seconds
Accuracy of the network on the 10000 test images: 62.54 %
Accuracy of plane : 69 %
Accuracy of   car : 78 %
Accuracy of  bird : 29 %
Accuracy of   cat : 42 %
Accuracy of  deer : 52 %
Accuracy of   dog : 50 %
Accuracy of  frog : 66 %
Accuracy of horse : 51 %
Accuracy of  ship : 72 %
Accuracy of truck : 60 %

Trial8:
  Net(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fc1): Linear(in_features=2048, out_features=512, bias=True)
    (fc2): Linear(in_features=512, out_features=10, bias=True)
  )
  hyperparameters:
    learning_rate: 0.001
    batch_size: 64
    num_epochs: 10
    optimizer: 'SGD'

Total training time: 117.99 seconds
Accuracy of the network on the 10000 test images: 62.54 %
Accuracy of plane : 41 %
Accuracy of   car : 75 %
Accuracy of  bird : 30 %
Accuracy of   cat : 32 %
Accuracy of  deer : 18 %
Accuracy of   dog : 36 %
Accuracy of  frog : 58 %
Accuracy of horse : 52 %
Accuracy of  ship : 75 %
Accuracy of truck : 53 %

Trial9:
  Net(
    (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fc1): Linear(in_features=2048, out_features=512, bias=True)
    (fc2): Linear(in_features=512, out_features=10, bias=True)
  )
  hyperparameters:
    learning_rate: 0.01
    batch_size: 64
    num_epochs: 10
    optimizer: 'SGD'

Total training time: 122.62 seconds
Accuracy of the network on the 10000 test images: 75.80 %
Accuracy of plane : 83 %
Accuracy of   car : 82 %
Accuracy of  bird : 65 %
Accuracy of   cat : 61 %
Accuracy of  deer : 74 %
Accuracy of   dog : 61 %
Accuracy of  frog : 78 %
Accuracy of horse : 76 %
Accuracy of  ship : 82 %
Accuracy of truck : 83 %